// Code generated by oto; DO NOT EDIT.

'use strict';

 
// ImageService manages LXC images
export class ImageService {
	
	// Build builds and imports the base image
	async build(imageBuildRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		imageBuildRequest = imageBuildRequest || {}
		const response = await fetch('/oto/ImageService.Build', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(imageBuildRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
		async source(imageSourceRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		imageSourceRequest = imageSourceRequest || {}
		const response = await fetch('/oto/ImageService.Source', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(imageSourceRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}
 
// InstanceService manages LXC Instances.
export class InstanceService {
	
		async create(instanceCreateRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		instanceCreateRequest = instanceCreateRequest || {}
		const response = await fetch('/oto/InstanceService.Create', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(instanceCreateRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
		async delete(instanceDeleteRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		instanceDeleteRequest = instanceDeleteRequest || {}
		const response = await fetch('/oto/InstanceService.Delete', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(instanceDeleteRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	// List returns a list of instances.
	async list(instanceListRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		instanceListRequest = instanceListRequest || {}
		const response = await fetch('/oto/InstanceService.List', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(instanceListRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
		async start(instanceStartRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		instanceStartRequest = instanceStartRequest || {}
		const response = await fetch('/oto/InstanceService.Start', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(instanceStartRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
		async stop(instanceStopRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		instanceStopRequest = instanceStopRequest || {}
		const response = await fetch('/oto/InstanceService.Stop', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(instanceStopRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}
 
// ProfileService manages LXC profiles
export class ProfileService {
	
	// List returns a list of LXC profiles
	async list(profileListRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		profileListRequest = profileListRequest || {}
		const response = await fetch('/oto/ProfileService.List', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(profileListRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}
 
// ProjectService manages LXC projects
export class ProjectService {
	
	// List returns a list of LXC projects
	async list(projectListRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		projectListRequest = projectListRequest || {}
		const response = await fetch('/oto/ProjectService.List', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(projectListRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}

