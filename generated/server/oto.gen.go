// Code generated by oto; DO NOT EDIT.

package server

import (
	"context"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"

	api "github.com/lxc/lxd/shared/api"
)

// ImageService manages LXC images
type ImageService interface {

	// Build builds and imports the base image
	Build(context.Context, ImageBuildRequest) (*ImageBuildResponse, error)
	Source(context.Context, ImageSourceRequest) (*ImageSourceResponse, error)
}

// InstanceService manages LXC Instances.
type InstanceService interface {
	Create(context.Context, InstanceCreateRequest) (*InstanceCreateResponse, error)
	Delete(context.Context, InstanceDeleteRequest) (*InstanceDeleteResponse, error)
	// List returns a list of instances.
	List(context.Context, InstanceListRequest) (*InstanceListResponse, error)
	Start(context.Context, InstanceStartRequest) (*InstanceStartResponse, error)
	Stop(context.Context, InstanceStopRequest) (*InstanceStopResponse, error)
}

// ProfileService manages LXC profiles
type ProfileService interface {

	// List returns a list of LXC profiles
	List(context.Context, ProfileListRequest) (*ProfileListResponse, error)
}

// ProjectService manages LXC projects
type ProjectService interface {

	// List returns a list of LXC projects
	List(context.Context, ProjectListRequest) (*ProjectListResponse, error)
}

type imageServiceServer struct {
	server       *otohttp.Server
	imageService ImageService
}

// Register adds the ImageService to the otohttp.Server.
func RegisterImageService(server *otohttp.Server, imageService ImageService) {
	handler := &imageServiceServer{
		server:       server,
		imageService: imageService,
	}
	server.Register("ImageService", "Build", handler.handleBuild)
	server.Register("ImageService", "Source", handler.handleSource)
}

func (s *imageServiceServer) handleBuild(w http.ResponseWriter, r *http.Request) {
	var request ImageBuildRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.imageService.Build(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *imageServiceServer) handleSource(w http.ResponseWriter, r *http.Request) {
	var request ImageSourceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.imageService.Source(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type instanceServiceServer struct {
	server          *otohttp.Server
	instanceService InstanceService
}

// Register adds the InstanceService to the otohttp.Server.
func RegisterInstanceService(server *otohttp.Server, instanceService InstanceService) {
	handler := &instanceServiceServer{
		server:          server,
		instanceService: instanceService,
	}
	server.Register("InstanceService", "Create", handler.handleCreate)
	server.Register("InstanceService", "Delete", handler.handleDelete)
	server.Register("InstanceService", "List", handler.handleList)
	server.Register("InstanceService", "Start", handler.handleStart)
	server.Register("InstanceService", "Stop", handler.handleStop)
}

func (s *instanceServiceServer) handleCreate(w http.ResponseWriter, r *http.Request) {
	var request InstanceCreateRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.instanceService.Create(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *instanceServiceServer) handleDelete(w http.ResponseWriter, r *http.Request) {
	var request InstanceDeleteRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.instanceService.Delete(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *instanceServiceServer) handleList(w http.ResponseWriter, r *http.Request) {
	var request InstanceListRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.instanceService.List(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *instanceServiceServer) handleStart(w http.ResponseWriter, r *http.Request) {
	var request InstanceStartRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.instanceService.Start(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *instanceServiceServer) handleStop(w http.ResponseWriter, r *http.Request) {
	var request InstanceStopRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.instanceService.Stop(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type profileServiceServer struct {
	server         *otohttp.Server
	profileService ProfileService
}

// Register adds the ProfileService to the otohttp.Server.
func RegisterProfileService(server *otohttp.Server, profileService ProfileService) {
	handler := &profileServiceServer{
		server:         server,
		profileService: profileService,
	}
	server.Register("ProfileService", "List", handler.handleList)
}

func (s *profileServiceServer) handleList(w http.ResponseWriter, r *http.Request) {
	var request ProfileListRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.profileService.List(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type projectServiceServer struct {
	server         *otohttp.Server
	projectService ProjectService
}

// Register adds the ProjectService to the otohttp.Server.
func RegisterProjectService(server *otohttp.Server, projectService ProjectService) {
	handler := &projectServiceServer{
		server:         server,
		projectService: projectService,
	}
	server.Register("ProjectService", "List", handler.handleList)
}

func (s *projectServiceServer) handleList(w http.ResponseWriter, r *http.Request) {
	var request ProjectListRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.projectService.List(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

type ImageBuildRequest struct {
	Project string `json:"project"`
	Source  string `json:"source"`
}

type ImageBuildResponse struct {
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type ImageSourceRequest struct {
	Project string `json:"project"`
}

type ImageSourceResponse struct {
	Source string `json:"source"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// CreateRequest is the request to create an instance.
type InstanceCreateRequest struct {
	Name    string `json:"name"`
	Project string `json:"project"`
}

// CreateResponse is the response from CreateInstance.
type InstanceCreateResponse struct {
	Instance InstanceDetails `json:"instance"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type InstanceDeleteRequest struct {
	Name    string `json:"name"`
	Project string `json:"project"`
}

type InstanceDeleteResponse struct {
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// InstanceDetails is the details of an LXC instance.
type InstanceDetails struct {
	// Name is the name of the LXC instance.
	Name string `json:"name"`
	// Status is the status of the Instance
	Status string `json:"status"`
	// IPV4 is the IP address of the Instance
	IPV4 string `json:"iPV4"`
}

// ListRequest is the request object for ListService.List.
type InstanceListRequest struct {
	Project string `json:"project"`
}

// ListResponse is the response object containing a list of instances.
type InstanceListResponse struct {
	// Instances is a list of LXC instances.
	Instances []InstanceDetails `json:"instances"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type InstanceStartRequest struct {
	Name    string `json:"name"`
	Project string `json:"project"`
}

type InstanceStartResponse struct {
	Instance InstanceDetails `json:"instance"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type InstanceStopRequest struct {
	Name    string `json:"name"`
	Project string `json:"project"`
}

type InstanceStopResponse struct {
	Instance InstanceDetails `json:"instance"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type Profile struct {
	ProfilePut api.ProfilePut `json:"profilePut"`
	Name       string         `json:"name"`
	UsedBy     []string       `json:"used_by"`
}

type ProfileListRequest struct {
	Project string `json:"project"`
}

type ProfileListResponse struct {
	Profiles []api.Profile `json:"profiles"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type ProfilePut struct {
	Config      map[string]string            `json:"config"`
	Description string                       `json:"description"`
	Devices     map[string]map[string]string `json:"devices"`
}

type Project struct {
	ProjectPut api.ProjectPut `json:"projectPut"`
	Name       string         `json:"name"`
	UsedBy     []string       `json:"used_by"`
}

type ProjectListRequest struct {
}

type ProjectListResponse struct {
	Projects []api.Project `json:"projects"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type ProjectPut struct {
	Config      map[string]string `json:"config"`
	Description string            `json:"description"`
}
